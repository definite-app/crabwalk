<?xml version="1.0" encoding="UTF-8"?>
<database name="crabwalk_database">
  <description>
    Database schema generated by Crabwalk. This schema represents the structure of tables
    derived from SQL transformations, including dependencies and relationships.
  </description>
  <!-- Tables derived from SQL transformations -->
  <schema name="transform">
    <description>Tables generated by Crabwalk transformations</description>
    <table name="driver_fact">
      <description>Generated from examples/race_data/driver_fact.sql</description>
      <column name="DRIVER_NAME" type="unknown" primary_key="true">
        <description>From d.DRIVER_NAME</description>
        <source>
          <table>d</table>
          <column>DRIVER_NAME</column>
        </source>
      </column>
      <column name="TEAM" type="unknown">
        <description>From d.TEAM</description>
        <source>
          <table>d</table>
          <column>TEAM</column>
        </source>
      </column>
      <column name="MANUFACTURER" type="unknown">
        <description>From d.MANUFACTURER</description>
        <source>
          <table>d</table>
          <column>MANUFACTURER</column>
        </source>
      </column>
      <column name=""CLASS"" type="unknown">
        <description>From d."CLASS"</description>
        <source>
          <table>d</table>
          <column>"CLASS"</column>
        </source>
      </column>
      <column name="total_laps" type="unknown">
        <description>From d.total_laps</description>
        <source>
          <table>d</table>
          <column>total_laps</column>
        </source>
      </column>
      <column name="best_lap_time" type="string">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "CONCAT", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: Floor { expr: BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "best_lap_time_seconds", quote_style: None }]), op: Divide, right: Value(Number("60", false)) }, field: NoDateTime }, data_type: Integer(None), format: None })), Unnamed(Expr(Value(SingleQuotedString(":")))), Unnamed(Expr(Function(Function { name: ObjectName([Ident { value: "LPAD", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: DoubleColon, expr: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "best_lap_time_seconds", quote_style: None }]), op: Modulo, right: Value(Number("60", false)) }, data_type: Decimal(PrecisionAndScale(10, 3)), format: None })), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }), data_type: Varchar(None), format: None })), Unnamed(Expr(Value(Number("6", false)))), Unnamed(Expr(Value(SingleQuotedString("0"))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="avg_lap_time" type="string">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "CONCAT", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: Floor { expr: BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "avg_lap_time_seconds", quote_style: None }]), op: Divide, right: Value(Number("60", false)) }, field: NoDateTime }, data_type: Integer(None), format: None })), Unnamed(Expr(Value(SingleQuotedString(":")))), Unnamed(Expr(Function(Function { name: ObjectName([Ident { value: "LPAD", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: DoubleColon, expr: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "avg_lap_time_seconds", quote_style: None }]), op: Modulo, right: Value(Number("60", false)) }, data_type: Decimal(PrecisionAndScale(10, 3)), format: None })), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }), data_type: Varchar(None), format: None })), Unnamed(Expr(Value(Number("6", false)))), Unnamed(Expr(Value(SingleQuotedString("0"))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="lap_time_stddev" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "lap_time_stddev", quote_style: None }]))), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="lap_time_iqr" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "lap_time_p75", quote_style: None }]), op: Minus, right: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "lap_time_p25", quote_style: None }]) })), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="improvement_percentage" type="unknown">
        <description>Derived from: Case { operand: None, conditions: [BinaryOp { left: BinaryOp { left: IsNotNull(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "first_lap_time", quote_style: None }])), op: And, right: IsNotNull(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "last_lap_time", quote_style: None }])) }, op: And, right: BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "first_lap_time", quote_style: None }]), op: Gt, right: Value(Number("0", false)) } }], results: [Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(BinaryOp { left: Nested(BinaryOp { left: Nested(BinaryOp { left: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "first_lap_time", quote_style: None }]), op: Minus, right: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "last_lap_time", quote_style: None }]) }), op: Divide, right: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "first_lap_time", quote_style: None }]) }), op: Multiply, right: Value(Number("100", false)) })), Unnamed(Expr(Value(Number("2", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })], else_result: Some(Value(Null)) }</description>
      </column>
      <column name="max_speed_kph" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "max_speed_kph", quote_style: None }]))), Unnamed(Expr(Value(Number("1", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="avg_speed_kph" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "avg_speed_kph", quote_style: None }]))), Unnamed(Expr(Value(Number("1", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="pit_stops" type="unknown">
        <description>From d.pit_stops</description>
        <source>
          <table>d</table>
          <column>pit_stops</column>
        </source>
      </column>
      <column name="green_flag_laps" type="unknown">
        <description>From d.green_flag_laps</description>
        <source>
          <table>d</table>
          <column>green_flag_laps</column>
        </source>
      </column>
      <column name="yellow_flag_laps" type="unknown">
        <description>From d.yellow_flag_laps</description>
        <source>
          <table>d</table>
          <column>yellow_flag_laps</column>
        </source>
      </column>
      <column name="green_flag_percentage" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(BinaryOp { left: Nested(BinaryOp { left: Cast { kind: DoubleColon, expr: CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "green_flag_laps", quote_style: None }]), data_type: Float(None), format: None }, op: Divide, right: Function(Function { name: ObjectName([Ident { value: "NULLIF", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(CompoundIdentifier([Ident { value: "d", quote_style: None }, Ident { value: "total_laps", quote_style: None }]))), Unnamed(Expr(Value(Number("0", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }) }), op: Multiply, right: Value(Number("100", false)) })), Unnamed(Expr(Value(Number("1", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="position_in_class" type="unknown">
        <description>From r.position_in_class</description>
        <source>
          <table>r</table>
          <column>position_in_class</column>
        </source>
      </column>
      <column name="overall_position" type="unknown">
        <description>From r.overall_position</description>
        <source>
          <table>r</table>
          <column>overall_position</column>
        </source>
      </column>
      <column name="consistency_rank_in_class" type="unknown">
        <description>From r.consistency_rank_in_class</description>
        <source>
          <table>r</table>
          <column>consistency_rank_in_class</column>
        </source>
      </column>
      <column name="speed_rank_in_class" type="unknown">
        <description>From r.speed_rank_in_class</description>
        <source>
          <table>r</table>
          <column>speed_rank_in_class</column>
        </source>
      </column>
      <source_dependencies>
        <dependency table="driver_max_laps" type="transformation"/>
        <dependency table="driver_rankings" type="transformation"/>
        <dependency table="transform.races" type="transformation"/>
        <dependency table="driver_metrics" type="transformation"/>
        <dependency table="driver_lap_data" type="transformation"/>
        <dependency table="driver_first_last_laps" type="transformation"/>
      </source_dependencies>
    </table>
    <table name="race_summary">
      <description>Generated from examples/race_data/race_summary.sql</description>
      <column name="DRIVER_NAME" type="unknown" primary_key="true">
        <description>Column from query</description>
      </column>
      <column name="TEAM" type="unknown">
        <description>Column from query</description>
      </column>
      <column name="MANUFACTURER" type="unknown">
        <description>Column from query</description>
      </column>
      <column name=""CLASS"" type="unknown">
        <description>Column from query</description>
      </column>
      <column name="total_laps" type="unknown">
        <description>Column from query</description>
      </column>
      <column name="best_lap_time" type="string">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "CONCAT", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: Floor { expr: BinaryOp { left: Identifier(Ident { value: "best_lap_time_seconds", quote_style: None }), op: Divide, right: Value(Number("60", false)) }, field: NoDateTime }, data_type: Integer(None), format: None })), Unnamed(Expr(Value(SingleQuotedString(":")))), Unnamed(Expr(Function(Function { name: ObjectName([Ident { value: "LPAD", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: DoubleColon, expr: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: BinaryOp { left: Identifier(Ident { value: "best_lap_time_seconds", quote_style: None }), op: Modulo, right: Value(Number("60", false)) }, data_type: Decimal(PrecisionAndScale(10, 3)), format: None })), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }), data_type: Varchar(None), format: None })), Unnamed(Expr(Value(Number("6", false)))), Unnamed(Expr(Value(SingleQuotedString("0"))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="avg_lap_time" type="string">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "CONCAT", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: Floor { expr: BinaryOp { left: Identifier(Ident { value: "avg_lap_time_seconds", quote_style: None }), op: Divide, right: Value(Number("60", false)) }, field: NoDateTime }, data_type: Integer(None), format: None })), Unnamed(Expr(Value(SingleQuotedString(":")))), Unnamed(Expr(Function(Function { name: ObjectName([Ident { value: "LPAD", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: DoubleColon, expr: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Cast { kind: Cast, expr: BinaryOp { left: Identifier(Ident { value: "avg_lap_time_seconds", quote_style: None }), op: Modulo, right: Value(Number("60", false)) }, data_type: Decimal(PrecisionAndScale(10, 3)), format: None })), Unnamed(Expr(Value(Number("3", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] }), data_type: Varchar(None), format: None })), Unnamed(Expr(Value(Number("6", false)))), Unnamed(Expr(Value(SingleQuotedString("0"))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="max_speed_kph" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Identifier(Ident { value: "max_speed_kph", quote_style: None }))), Unnamed(Expr(Value(Number("1", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="avg_speed_kph" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROUND", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [Unnamed(Expr(Identifier(Ident { value: "avg_speed_kph", quote_style: None }))), Unnamed(Expr(Value(Number("1", false))))], clauses: [] }), filter: None, null_treatment: None, over: None, within_group: [] })</description>
      </column>
      <column name="pit_stops" type="unknown">
        <description>Column from query</description>
      </column>
      <column name="position_in_class" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROW_NUMBER", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [], clauses: [] }), filter: None, null_treatment: None, over: Some(WindowSpec(WindowSpec { window_name: None, partition_by: [Identifier(Ident { value: "CLASS", quote_style: Some('"') })], order_by: [OrderByExpr { expr: Identifier(Ident { value: "best_lap_time_seconds", quote_style: None }), asc: None, nulls_first: None, with_fill: None }], window_frame: None })), within_group: [] })</description>
      </column>
      <column name="overall_position" type="unknown">
        <description>Derived from: Function(Function { name: ObjectName([Ident { value: "ROW_NUMBER", quote_style: None }]), parameters: None, args: List(FunctionArgumentList { duplicate_treatment: None, args: [], clauses: [] }), filter: None, null_treatment: None, over: Some(WindowSpec(WindowSpec { window_name: None, partition_by: [], order_by: [OrderByExpr { expr: Identifier(Ident { value: "best_lap_time_seconds", quote_style: None }), asc: None, nulls_first: None, with_fill: None }], window_frame: None })), within_group: [] })</description>
      </column>
      <source_dependencies>
        <dependency table="driver_stats" type="transformation"/>
        <dependency table="lap_times_in_seconds" type="transformation"/>
        <dependency table="transform.races" type="transformation"/>
      </source_dependencies>
    </table>
    <table name="races">
      <description>Generated from examples/race_data/races.sql</description>
      <column name="*" type="unknown" primary_key="true">
        <description>Column from query</description>
      </column>
      <source_dependencies>
        <dependency table="read_csv_auto" type="transformation"/>
      </source_dependencies>
    </table>
    <table name="sample_parquet">
      <description>Generated from examples/race_data/sample_parquet.sql</description>
      <column name="*" type="unknown" primary_key="true">
        <description>Column from query</description>
      </column>
      <source_dependencies>
        <dependency table="races" type="transformation"/>
      </source_dependencies>
    </table>
  </schema>
  <!-- Entity-Relationship Diagram -->
  <entity_relationships>
    <relationship type="references" name="sample_parquet_to_races">
      <from table="transform.sample_parquet" column="id"/>
      <to table="transform.races" column="id"/>
      <description>sample_parquet depends on races</description>
    </relationship>
  </entity_relationships>
  <!-- Data Lineage -->
  <data_lineage>
    <transformation name="sql_transformations">
      <description>SQL-based data transformations executed by Crabwalk</description>
      <steps>
        <step from="multiple" to="transform.sample_parquet">
          <sources>
            <source>races</source>
          </sources>
          <operations>
            <operation>SQL transformation</operation>
          </operations>
        </step>
        <step from="multiple" to="transform.driver_fact">
          <sources>
            <source>driver_max_laps</source>
            <source>driver_rankings</source>
            <source>transform.races</source>
            <source>driver_metrics</source>
            <source>driver_lap_data</source>
            <source>driver_first_last_laps</source>
          </sources>
          <column_lineage>
            <mapping>
              <source_table>d</source_table>
              <source_column>DRIVER_NAME</source_column>
              <target_column>DRIVER_NAME</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>TEAM</source_column>
              <target_column>TEAM</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>MANUFACTURER</source_column>
              <target_column>MANUFACTURER</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>"CLASS"</source_column>
              <target_column>"CLASS"</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>total_laps</source_column>
              <target_column>total_laps</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>pit_stops</source_column>
              <target_column>pit_stops</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>green_flag_laps</source_column>
              <target_column>green_flag_laps</target_column>
            </mapping>
            <mapping>
              <source_table>d</source_table>
              <source_column>yellow_flag_laps</source_column>
              <target_column>yellow_flag_laps</target_column>
            </mapping>
            <mapping>
              <source_table>r</source_table>
              <source_column>position_in_class</source_column>
              <target_column>position_in_class</target_column>
            </mapping>
            <mapping>
              <source_table>r</source_table>
              <source_column>overall_position</source_column>
              <target_column>overall_position</target_column>
            </mapping>
            <mapping>
              <source_table>r</source_table>
              <source_column>consistency_rank_in_class</source_column>
              <target_column>consistency_rank_in_class</target_column>
            </mapping>
            <mapping>
              <source_table>r</source_table>
              <source_column>speed_rank_in_class</source_column>
              <target_column>speed_rank_in_class</target_column>
            </mapping>
          </column_lineage>
          <operations>
            <operation>SQL transformation</operation>
          </operations>
        </step>
        <step from="multiple" to="transform.races">
          <sources>
            <source>read_csv_auto</source>
          </sources>
          <operations>
            <operation>SQL transformation</operation>
          </operations>
        </step>
        <step from="multiple" to="transform.race_summary">
          <sources>
            <source>driver_stats</source>
            <source>lap_times_in_seconds</source>
            <source>transform.races</source>
          </sources>
          <operations>
            <operation>SQL transformation</operation>
          </operations>
        </step>
      </steps>
    </transformation>
  </data_lineage>
</database>